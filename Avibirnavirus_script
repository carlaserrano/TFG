#Alignment of the readings against the reference viral genome with bowtie2. 

reads_prefix=$1
echo "Assembling reads from project $reads_prefix"

R1=${reads_prefix}_R1_001.fastq
R2=${reads_prefix}_R2_001.fastq                                                                                                                                                         
#Copy the reference sequence data and the readings in a single folder, in this case in the mapping folder, either directly or using the "cp" command. To create and open our folder on the terminal:
## mkdir mapping
##cd mapping
                                                                 

if [ ! -e ibdv.btindex.1.bt2 ] ; then
    echo "building index for idbv"
    bowtie2-build ibdv.fasta ibdv.btindex
fi

##ibdv, is the name of our reference sequence in this case.  

# Next we are going to pass the files generated in sam format to bam, ordered and indexed wtith the samtools tool.                                                                                                                       

if [ ! -e ${reads_prefix}_mapped.sam ] ; then
    echo "Running Bowtie2 on $R1 $R2"
    echo "bowtie2 -x ibdv.btindex -1 $R1 -2 $R2 -S ${reads_prefix}_mapped.sam"
    bowtie2 -x ibdv.btindex -1 $R1 -2 $R2 -S ${reads_prefix}_mapped.sam
fi

if [ ! -e ${reads_prefix}_mapped_sorted.bam ] ; then
    echo "Sorting ${reads_prefix}_mapped.sam"
    echo "samtools sort ${reads_prefix}_mapped.sam -o ${reads_prefix}_mapped_sorted.bam"
    samtools sort ${reads_prefix}_mapped.sam -o ${reads_prefix}_mapped_sorted.bam
fi

if [ ! -e ${reads_prefix}_mapped_sorted.bam.bai ] ; then
    echo "indexing ${reads_prefix}_mapped_sorted.bam"
    echo "samtools index ${reads_prefix}_mapped_sorted.bam"
    samtools index ${reads_prefix}_mapped_sorted.bam
fi


#Those readings that have been discarded, either due to contamination or because two matches have been made using bowtie2, are analyzed using megaBLAST. In both cases, these sequences will not be shown in the reconstruction of the genome visualized with igv and we want to analyze them in case they were 2 matches when they coincide with a cut point in which there was a deletion or insertion.
##First we pass the discarded or rejected sequences in fastq format to fasta format.
### ../discarded_fasta , to save in this new folder and we use basename to change the termination of the name.
for i in * ; 
do 
   echo $i ; 
   fastq_to_fasta -i $i -n -v -o ../discarded_fasta/`basename $i .fastq`.fasta ; 
done |& tee reads.cnt

##We run megaBLAST , included in the blastn package.
###../ref/ folder were the reference genome is located
for i in *001.fasta ; 
do 
   echo $i ; 
   name=`basename $i .fasta`
   blastn -query $i -db ../ref/ibdv -out ../discarded_blast/$name.blast7 -outfmt 7
done |& tee blast.log
in 

##To remove form our blast7 files all the information that don't interest us
for i in *.blast7 ; do grep -v '^#' $i > `basename $i .blast7`.b7 ; echo $i ; done

#We want to observe the sequencing depth, that is, the coverage of the readings against the reference genome for each reading, we do it with the samtools depth tool, and then using R we make a plot of the depth of chromosomes A and B separately


if [ ! -e ${reads_prefix}_coverage.depth ] ; then
    samtools depth ${reads_prefix}_mapped_sorted.bam \
    > ${reads_prefix}_coverage.depth
fi

if [ ! -e ${reads_prefix}_coverage_A.png ] ; then
    R --vanilla <<END
    t <- read.table("$OUT_PFX.sorted.depth")
    png("${reads_prefix}_coverage_A.png", width=1000, height=1000)
    d <- t[t$V1=='A',3]
    plot(d)
    dev.off()
    png("${reads_prefix}_coverage_B.png", width=1000, height=1000)
    d <- t[t$V1=='A',3]
    plot(d)
    dev.off()
END                                                                           
fi


if [ ! -e ${reads_prefix}_unmapped_R1.fq ] ; then
    echo -n "Generating table of unmapped reads"
    # -f 4 means select the read if it is not mapped, even if its mate is                  
    # -f 12 means select if both the read and its mate are not mapped                      
    # -b means output as BAM file                                                          
    echo -n "."
    samtools view -b -f 4 ${reads_prefix}_mapped_sorted.bam \
        > ${reads_prefix}_unmapped.bam
    echo -n "."
    samtools sort -n ${reads_prefix}_unmapped.bam \
            -o ${reads_prefix}_unmapped_sorted.bam
    echo -n "."
    bamToFastq -i ${reads_prefix}_unmapped_sorted.bam \
        -fq ${reads_prefix}_unmapped_R1.fq \
        -fq2 ${reads_prefix}_unmapped_R2.fq
    echo ""
fi
   
#What we are going to do is compare the results obtained with samtools depth and those of blast, so that samtools depth gives us the number of readings we have at each point, which will increase except if we have one indel, in this case we will see a decline in the number of readings. 

#Next we are going to read and normalize our data for the coverage.depth files of all the strains, in which we are interested in 3 columns, the first is the chromosome, the second is the position and the third is the depth. To do this we open R in the folder work / jrrodriguez / birnavirus-ngs / ibdv / bowtie2 / plots

infiles <- list.files(pattern=paste("[Bl].*.depth$", sep=''))
infiles
#we name ch the chromosomes column
ch <- c(rep('A', 3261), rep('B', 2827))
#we name the positions column and we match it with the depth column
nt <- c(seq(3261), seq(2827))	# 3261+2827 (ChrA + ChrB)
a <- data.frame(ch, nt)
#we add a column with ceros
i=0
#normalize
# we will store allexp the depth data in a data.frame callexped "allexp"

rm(allexp)
# the first time 'allexp' will not exist yet
for (f in infiles) { 
    i=i+1
    print(f) ; 
    # get the name of the experiment , todo esto lo hacemos para que depsues de tener los       #datos normalizados cada uno de ellos tenga como nombre el fichero del que proceden ,       #es decir la cepa correspondiente.
    
    #We use the gsub function to substitute everything we have starting with _ in the name of the file and keep only the first thing, which is the name of the strain
    expnam <- gsub("_coverage.depth","", f); 
    print(expnam) ; 
    depth <- read.table(f) ; 
    
    #With this function we are going to name the columns of the normalized depths, with the previously generated names corresponding to each of the strains
    colnames(depth) <- c('Chr', 'nt', expnam) ; 
    print(head(depth)) ; 
    
    # normalize the data from 0 to 1
    M <- max(depth[expnam])
    depth[expnam] = depth[expnam]/M

    if (!exists('allexp')) 
    	# the first time 'allexp' does not exist, we assign everything
        allexp <- depth 
    else
        # the rest of times, we only add the experiment depth column
	# NOTE: this will fail if the number of depth entries is not
        # the same in allexp files!!!
        #allexp <- data.frame(allexp, depth[expnam]) }
        # this should work instead
        allexp <- merge(allexp, depth, by=c(1,2), all=TRUE)

}
allexp[is.na(allexp)] <- 0
print(head(allexp))

#save
write.table(allexp, "normalize-data")

#We then make a plot of the entire normalized data set, each strain marked with a color, for both chromosomes A and B.

chromosomes <- levels(as.factor(a$ch))
ncols <- dim(a)[2]
for (c in chromosomes) {
    png(paste(paste("all.depth", sep=''), c, "png", sep='.'), 
        width=1000, height=1000)
    d <- a[a$ch==c,]
    head(d)
    typ='l'	# l for line, p for points
    plot(d[ ,3], type=typ)
    for (i in 3:ncols) {
      if (typ == 'p')
        points(d[,i], col=i)
      else
        lines(d[, i], col=i)
    }
    legend(100,300, legend=infiles, col=3:ncols, lty=2:ncols)
    dev.off()
}

#Analyze blast
##Choose the ones with 1,2 and 3 matches, and put them in a separate file, we are only going to put the name of the sequences.
for i in *.b7 ; do 
        echo $i 
	cat $i | cut -f1 | sort | uniq -c | grep " 1 " \
	| sed -e 's/.* //g' \
	> one_match/`basename $i b7`names.txt
	cat $i | cut -f1 | sort | uniq -c | grep " 2 " \
	| sed -e 's/.* //g' \
	> two_matches/`basename $i b7`names.txt
	cat $i | cut -f1 | sort | uniq -c | grep " 3 " \
	| sed -e 's/.* //g' \
	> three_matches/`basename $i b7`names.txt
done
	 
##now create new b7 files sorted by name using the above indexes, aÃ±adir todos los datos de la tabla separados por el numero de matches. REalmente estamos pegando el resto de la tabla a los nombres que ya habian sido seleccionados en el paso anterior.
cat $i | sort | join - one_match/`basename $i b7`names.txt \ 
   > one_match/`basename $i b7`1.b7
cat $i | sort | join - two_matches/`basename $i b7`names.txt \ 
   > two_matches/`basename $i b7`2.b7
cat $i | sort | join - three_matches/`basename $i b7`names.txt \ 
   > three_matches/`basename $i b7`3.b7

	 



