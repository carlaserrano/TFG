#En primer lugar realizamos el alineamiento de las lecturas a la secuencia de referencia por medio de bowtie2. 

reads_prefix=$1
echo "Assembling reads from project $reads_prefix"

R1=${reads_prefix}_R1_001.fastq
R2=${reads_prefix}_R2_001.fastq                                                                                                                                                         
#copiar los datos de secuencia de referencia y las lecturas en una unica carpeta en este caso en la carpeta mapping, bien directamente o utilizando el comando "cp" . Para crear y abrir nuestra carpeta en la teminal:
## mkdir mapping
##cd mapping
                                                                 

if [ ! -e ibdv.btindex.1.bt2 ] ; then
    echo "building index for idbv"
    bowtie2-build ibdv.fasta ibdv.btindex
fi

##ibdv, es el nombre de nuestra secuencia de renferencia en este caso.  

# A continuacion vamos a pasar los ficheros generados en formato sam , a bam ordenados e indexados , por medio de la herramienta samtools.                                                                                                                       

if [ ! -e ${reads_prefix}_mapped.sam ] ; then
    echo "Running Bowtie2 on $R1 $R2"
    echo "bowtie2 -x ibdv.btindex -1 $R1 -2 $R2 -S ${reads_prefix}_mapped.sam"
    bowtie2 -x ibdv.btindex -1 $R1 -2 $R2 -S ${reads_prefix}_mapped.sam
fi

if [ ! -e ${reads_prefix}_mapped_sorted.bam ] ; then
    echo "Sorting ${reads_prefix}_mapped.sam"
    echo "samtools sort ${reads_prefix}_mapped.sam -o ${reads_prefix}_mapped_sorted.bam"
    samtools sort ${reads_prefix}_mapped.sam -o ${reads_prefix}_mapped_sorted.bam
fi

if [ ! -e ${reads_prefix}_mapped_sorted.bam.bai ] ; then
    echo "indexing ${reads_prefix}_mapped_sorted.bam"
    echo "samtools index ${reads_prefix}_mapped_sorted.bam"
    samtools index ${reads_prefix}_mapped_sorted.bam
fi


#Por otra parte aquellas lecturas que hayan sido descartadas , bien por contaminacion o porque se han realizado dos matches mediante bowtie2 son analizadas utilizando megaBLAST. En ambos casos , estas secuencias no se mostraran en la reconstruccion del genoma visualizada con igv y queremos analizarlas por si se tratase de 2 matches al coincidir con un purto de corte en el cual existiese una delección o insercción.

##En primer lugar pasamos las secuencias descartadas o rechazadas en formato fastq a formato fasta.  
### ../discarded_fasta , para guardar en esta nueva carpeta y basename lo utilizamos para cambiar el nombre concretamente la terminacion de este.
for i in * ; 
do 
   echo $i ; 
   fastq_to_fasta -i $i -n -v -o ../discarded_fasta/`basename $i .fastq`.fasta ; 
done |& tee reads.cnt

##Corremos megaBLAST , el cual se incluye en el paquete blastn 
###../ref/ carpeta donde se encuentra el genoma de referencia
for i in *001.fasta ; 
do 
   echo $i ; 
   name=`basename $i .fasta`
   blastn -query $i -db ../ref/ibdv -out ../discarded_blast/$name.blast7 -outfmt 7
done |& tee blast.log

#Por otra parte queremos observar la profundidad de secuenciacion , es decir la covertura de las lecturas frente al genoma de referencia por cada lectura

samtools depth name_mapped_sorted.bam > name_coverage.depth

#Lo que vamos a hacer va a ser comparar los resultados obtenidos con samtools depth y los de blast , de manera que samtools depth nos da el numero de lecturas que tenemos en cada punto , que iran aumentando de manera creciente , a excepcion de si tenemos una inserccion o deleccion en dicho caso veremos un decaimiento del numero de lecturas sin llegar a 0 porque se ha realizado la secuenciacion de muchisimos fragmentos??¿¿?¿. Coincidira con el lugar donde en nuestro blast nos indique la tablita con el inicio y el final donde no se ha podido realizar el alineamiento con la secuencia de referencia.
##para eliminar de nuestos ficheros blast7 y dejar solo la tablita con la informacion que nos interesa

for i in *.blast7 ; do grep -v '^#' $i > `basename $i .blast7`.b7 ; echo $i ; done





